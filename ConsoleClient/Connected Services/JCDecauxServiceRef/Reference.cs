//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.JCDecauxServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Town", Namespace="http://schemas.datacontract.org/2004/07/JCDecauxLibrary")]
    [System.SerializableAttribute()]
    public partial class Town : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/JCDecauxLibrary")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Available_bike_standsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Available_bikesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Available_bike_stands {
            get {
                return this.Available_bike_standsField;
            }
            set {
                if ((this.Available_bike_standsField.Equals(value) != true)) {
                    this.Available_bike_standsField = value;
                    this.RaisePropertyChanged("Available_bike_stands");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Available_bikes {
            get {
                return this.Available_bikesField;
            }
            set {
                if ((this.Available_bikesField.Equals(value) != true)) {
                    this.Available_bikesField = value;
                    this.RaisePropertyChanged("Available_bikes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JCDecauxServiceRef.IJCDecauxOperations", CallbackContract=typeof(ConsoleClient.JCDecauxServiceRef.IJCDecauxOperationsCallback))]
    public interface IJCDecauxOperations {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetTowns", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetTownsResponse")]
        ConsoleClient.JCDecauxServiceRef.Town[] GetTowns();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetTowns", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetTownsResponse")]
        System.Threading.Tasks.Task<ConsoleClient.JCDecauxServiceRef.Town[]> GetTownsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetStationsFromTown", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetStationsFromTownResponse")]
        void GetStationsFromTown(string town);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetStationsFromTown", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetStationsFromTownResponse")]
        System.Threading.Tasks.Task GetStationsFromTownAsync(string town);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetStation", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetStationResponse")]
        void GetStation(string station, string town);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/GetStation", ReplyAction="http://tempuri.org/IJCDecauxOperations/GetStationResponse")]
        System.Threading.Tasks.Task GetStationAsync(string station, string town);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownEventResponse")]
        void SubscribeGetStationsFromTownEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownEventResponse")]
        System.Threading.Tasks.Task SubscribeGetStationsFromTownEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownFinishedEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownFinishedEventR" +
            "esponse")]
        void SubscribeGetStationsFromTownFinishedEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownFinishedEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationsFromTownFinishedEventR" +
            "esponse")]
        System.Threading.Tasks.Task SubscribeGetStationsFromTownFinishedEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationEventResponse")]
        void SubscribeGetStationEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationEventResponse")]
        System.Threading.Tasks.Task SubscribeGetStationEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationFinishedEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationFinishedEventResponse")]
        void SubscribeGetStationFinishedEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationFinishedEvent", ReplyAction="http://tempuri.org/IJCDecauxOperations/SubscribeGetStationFinishedEventResponse")]
        System.Threading.Tasks.Task SubscribeGetStationFinishedEventAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJCDecauxOperationsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJCDecauxOperations/GotStationsFromTown")]
        void GotStationsFromTown(string town, ConsoleClient.JCDecauxServiceRef.Station[] stationsResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJCDecauxOperations/GotStation")]
        void GotStation(string station, string town, ConsoleClient.JCDecauxServiceRef.Station stationResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJCDecauxOperations/GetStationsFinished")]
        void GetStationsFinished();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IJCDecauxOperations/GetStationFinished")]
        void GetStationFinished();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJCDecauxOperationsChannel : ConsoleClient.JCDecauxServiceRef.IJCDecauxOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JCDecauxOperationsClient : System.ServiceModel.DuplexClientBase<ConsoleClient.JCDecauxServiceRef.IJCDecauxOperations>, ConsoleClient.JCDecauxServiceRef.IJCDecauxOperations {
        
        public JCDecauxOperationsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public JCDecauxOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public JCDecauxOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JCDecauxOperationsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public JCDecauxOperationsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ConsoleClient.JCDecauxServiceRef.Town[] GetTowns() {
            return base.Channel.GetTowns();
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.JCDecauxServiceRef.Town[]> GetTownsAsync() {
            return base.Channel.GetTownsAsync();
        }
        
        public void GetStationsFromTown(string town) {
            base.Channel.GetStationsFromTown(town);
        }
        
        public System.Threading.Tasks.Task GetStationsFromTownAsync(string town) {
            return base.Channel.GetStationsFromTownAsync(town);
        }
        
        public void GetStation(string station, string town) {
            base.Channel.GetStation(station, town);
        }
        
        public System.Threading.Tasks.Task GetStationAsync(string station, string town) {
            return base.Channel.GetStationAsync(station, town);
        }
        
        public void SubscribeGetStationsFromTownEvent() {
            base.Channel.SubscribeGetStationsFromTownEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeGetStationsFromTownEventAsync() {
            return base.Channel.SubscribeGetStationsFromTownEventAsync();
        }
        
        public void SubscribeGetStationsFromTownFinishedEvent() {
            base.Channel.SubscribeGetStationsFromTownFinishedEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeGetStationsFromTownFinishedEventAsync() {
            return base.Channel.SubscribeGetStationsFromTownFinishedEventAsync();
        }
        
        public void SubscribeGetStationEvent() {
            base.Channel.SubscribeGetStationEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeGetStationEventAsync() {
            return base.Channel.SubscribeGetStationEventAsync();
        }
        
        public void SubscribeGetStationFinishedEvent() {
            base.Channel.SubscribeGetStationFinishedEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeGetStationFinishedEventAsync() {
            return base.Channel.SubscribeGetStationFinishedEventAsync();
        }
    }
}
